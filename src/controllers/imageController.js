const { GoogleGenAI, Modality } = require("@google/genai");

const { uploadImageToCloudinary } = require("../utils/cloudinary");

const generateImage = async (req, res) => {
  try {
    const { userPrompt, imageType, userPreference } = req.body;
    if (!userPrompt || !imageType || !userPreference) {
      return res.status(400).json({
        success: false,
        error:
          "Missing user prompt, image type, or fan preference in the request body.",
      });
    }

    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

    const fullPrompt = `Generate a highly creative, funny, and sarcastic football troll meme image.
    The image should depict: "${userPrompt}".
    The visual style should be: "${imageType}".
    Context for the troll: The image is from the perspective of ${userPreference}.
    Ensure the image is visually striking, clear, and suitable for sharing on social media.
    Focus on making it humorous and satirical in a football context.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: fullPrompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const imageData = part.inlineData.data;
        const mimeType = part.inlineData.mimeType || "image/png";
        const imageBase64DataURI = `data:${mimeType};base64,${imageData}`;
        // const buffer = Buffer.from(imageData, "base64");
        // fs.writeFileSync("gemini-native-image.png", buffer);
        // console.log("Image saved as gemini-native-image.png");

        const uploadToCloudinary = await uploadImageToCloudinary(
          imageBase64DataURI
        );
        const imageUrl = uploadToCloudinary.secure_url;

        if (!imageUrl) {
          return res.status(500).json({
            success: false,
            error:
              "No image data was generated by the AI model or failed to upload.",
          });
        }
        res.status(200).json({
          success: true,
          imageUrl: imageUrl,
          text: response.candidates[0].content.parts[0]?.text || userPrompt,
        });
      }
    }
  } catch (error) {
    console.error("Full error generating image:", error);
    if (error.response && error.response.data) {
      console.error("Gemini API Error Response Data:", error.response.data);
    }
    res.status(500).json({
      success: false,
      error: error.message || "Image generation failed due to a server error.",
    });
  }
};

const suggestKeywords = async (req, res) => {
  const { prompt, preference } = req.body;

  if (!prompt) {
    return res
      .status(400)
      .json({ error: "Prompt is required for keyword suggestions." });
  }

  let suggestionPrompt = `Given the user's input for a football troll meme: "${prompt}".`;
  if (preference) {
    suggestionPrompt += ` The user's fan preference is: "${preference}".`;
  }
  suggestionPrompt += `
    Suggest 3-5 relevant, funny, and creative keywords or short phrases that could enhance the meme prompt.
    The keywords should be suitable for a football troll context.
    List them, separated by commas, without any introductory or concluding text, or numbering.
    Examples: "VAR controversy", "transfer flop", "trophy drought", "offside trap", "empty stadium", "own goal".
    Ensure there's no additional conversation, just the comma-separated list.`;

  console.log("Full prompt for Gemini keyword suggestion:", suggestionPrompt);

  try {
    const result = await textModel.generateContent(suggestionPrompt);
    const response = await result.response;
    const text = response.text();

    // Parse the comma-separated suggestions
    const suggestions = text
      .split(",")
      .map((s) => s.trim())
      .filter((s) => s.length > 0 && s.toLowerCase() !== "undefined");

    res.status(200).json({ suggestions });
  } catch (error) {
    console.error("Error generating keyword suggestions:", error);
    if (error.response) {
      console.error("Gemini API Error Response Data:", error.response.data);
    }
    res.status(500).json({ error: "Failed to get keyword suggestions." });
  }
};

module.exports = { generateImage, suggestKeywords };
