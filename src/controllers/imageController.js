const { GoogleGenAI, Modality } = require("@google/genai");
const User = require("../models/Usermodel.js");
const Image = require("../models/Imagemodel.js");
const { uploadImageToCloudinary } = require("../utils/cloudinary.js");

const generateImage = async (req, res) => {
  try {
    const { userPrompt, imageType, userPreference } = req.body;
    const email = req.params.email;
    if (!userPrompt || !imageType || !userPreference) {
      return res.status(400).json({
        success: false,
        error:
          "Missing user prompt, image type, or fan preference in the request body.",
      });
    }

    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

    const fullPrompt = `Generate a highly creative, funny, and sarcastic football troll meme image.
    The image should depict: "${userPrompt}".
    The visual style should be: "${imageType}".
    Context for the troll: The image is from the perspective of ${userPreference}.
    Ensure the image is visually striking, clear, and suitable for sharing on social media.
    Focus on making it humorous and satirical in a football context.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: fullPrompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const imageData = part.inlineData.data;
        const mimeType = part.inlineData.mimeType || "image/png";
        const imageBase64DataURI = `data:${mimeType};base64,${imageData}`;
        // const buffer = Buffer.from(imageData, "base64");
        // fs.writeFileSync("gemini-native-image.png", buffer);
        // console.log("Image saved as gemini-native-image.png");

        const uploadToCloudinary = await uploadImageToCloudinary(
          imageBase64DataURI
        );
        const imageUrl = uploadToCloudinary.secure_url;

        if (!imageUrl) {
          return res.status(500).json({
            success: false,
            error:
              "No image data was generated by the AI model or failed to upload.",
          });
        }
        // save the generated image URL if user is logged in otherwise not
        const user = await User.findOne({ email });
        if (user) {
          const createdImage = await Image.create({
            imgUrl: imageUrl,
            email: user.email,
          });
          // const updatedUser = await User.updateOne({
          //   $push: { generatedImages: createdImage._id },
          // });
          // console.log("Updated user:", updatedUser);
        }

        res.status(200).json({
          success: true,
          imageUrl,
          text: response.candidates[0].content.parts[0]?.text || userPrompt,
        });
      }
    }
  } catch (error) {
    console.error("Full error generating image:", error);
    if (error.response && error.response.data) {
      console.error("Gemini API Error Response Data:", error.response.data);
    }
    res.status(500).json({
      success: false,
      error: error.message || "Image generation failed due to a server error.",
    });
  }
};

const getImagesofUser = async (req, res) => {
  const email = req.params.email;
  console.log(email);
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(400)
        .json({ error: "Could not find user from database" });
    }
    const findImage = await Image.find({ email });

    res.status(200).json({
      success: true,
      images: findImage,
    });
  } catch (error) {
    res
      .status(500)
      .json({ error: "Could not find any images", details: error.message });
  }
};

module.exports = { generateImage, getImagesofUser };
